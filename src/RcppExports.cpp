// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppThread.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// b_spline
Eigen::MatrixXd b_spline(const Eigen::ArrayXd& x, const Eigen::ArrayXd& knots, size_t degree);
RcppExport SEXP _hydrorecipes_b_spline(SEXP xSEXP, SEXP knotsSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< size_t >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(b_spline(x, knots, degree));
    return rcpp_result_gen;
END_RCPP
}
// fft_matrix
Eigen::MatrixXcd fft_matrix(Eigen::MatrixXd x, size_t n_new);
RcppExport SEXP _hydrorecipes_fft_matrix(SEXP xSEXP, SEXP n_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_new(n_newSEXP);
    rcpp_result_gen = Rcpp::wrap(fft_matrix(x, n_new));
    return rcpp_result_gen;
END_RCPP
}
// convolve_vec
Eigen::VectorXd convolve_vec(Eigen::VectorXd x, Eigen::VectorXd y);
RcppExport SEXP _hydrorecipes_convolve_vec(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_vec(x, y));
    return rcpp_result_gen;
END_RCPP
}
// convolve_filter
Eigen::VectorXd convolve_filter(const Eigen::VectorXd& x, const Eigen::VectorXd& y, bool remove_partial, bool reverse);
RcppExport SEXP _hydrorecipes_convolve_filter(SEXP xSEXP, SEXP ySEXP, SEXP remove_partialSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type remove_partial(remove_partialSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_filter(x, y, remove_partial, reverse));
    return rcpp_result_gen;
END_RCPP
}
// convolve_overlap_add
Eigen::VectorXd convolve_overlap_add(Eigen::VectorXd& x, Eigen::VectorXd& y);
RcppExport SEXP _hydrorecipes_convolve_overlap_add(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_overlap_add(x, y));
    return rcpp_result_gen;
END_RCPP
}
// convolve_overlap_save
Eigen::VectorXd convolve_overlap_save(Eigen::VectorXd& x, Eigen::VectorXd& y);
RcppExport SEXP _hydrorecipes_convolve_overlap_save(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_overlap_save(x, y));
    return rcpp_result_gen;
END_RCPP
}
// convolve_tf
Eigen::VectorXd convolve_tf(Eigen::VectorXd x, Eigen::VectorXcd y);
RcppExport SEXP _hydrorecipes_convolve_tf(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXcd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_tf(x, y));
    return rcpp_result_gen;
END_RCPP
}
// convolve_matrix
Eigen::MatrixXd convolve_matrix(const Eigen::VectorXd& x, const Eigen::MatrixXd& y, bool remove_partial, bool reverse);
RcppExport SEXP _hydrorecipes_convolve_matrix(SEXP xSEXP, SEXP ySEXP, SEXP remove_partialSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type remove_partial(remove_partialSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_matrix(x, y, remove_partial, reverse));
    return rcpp_result_gen;
END_RCPP
}
// multiply_ffts
Eigen::MatrixXcd multiply_ffts(Eigen::MatrixXcd& x);
RcppExport SEXP _hydrorecipes_multiply_ffts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_ffts(x));
    return rcpp_result_gen;
END_RCPP
}
// fill_lower_left
Eigen::MatrixXcd fill_lower_left(Eigen::MatrixXcd& x, size_t start);
RcppExport SEXP _hydrorecipes_fill_lower_left(SEXP xSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_lower_left(x, start));
    return rcpp_result_gen;
END_RCPP
}
// spec_pgram
Eigen::MatrixXcd spec_pgram(Eigen::MatrixXd& x, const Eigen::VectorXi& spans, bool detrend, bool demean, double taper);
RcppExport SEXP _hydrorecipes_spec_pgram(SEXP xSEXP, SEXP spansSEXP, SEXP detrendSEXP, SEXP demeanSEXP, SEXP taperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type spans(spansSEXP);
    Rcpp::traits::input_parameter< bool >::type detrend(detrendSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    Rcpp::traits::input_parameter< double >::type taper(taperSEXP);
    rcpp_result_gen = Rcpp::wrap(spec_pgram(x, spans, detrend, demean, taper));
    return rcpp_result_gen;
END_RCPP
}
// spec_welch
Eigen::MatrixXcd spec_welch(Eigen::MatrixXd& x, size_t length_subset, double overlap, Eigen::VectorXd window);
RcppExport SEXP _hydrorecipes_spec_welch(SEXP xSEXP, SEXP length_subsetSEXP, SEXP overlapSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type length_subset(length_subsetSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(spec_welch(x, length_subset, overlap, window));
    return rcpp_result_gen;
END_RCPP
}
// solve_cplx_parallel
Eigen::MatrixXcd solve_cplx_parallel(const Eigen::MatrixXcd& x);
RcppExport SEXP _hydrorecipes_solve_cplx_parallel(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXcd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_cplx_parallel(x));
    return rcpp_result_gen;
END_RCPP
}
// solve_cplx_irr
Eigen::MatrixXcd solve_cplx_irr(Eigen::MatrixXcd& x, size_t n_groups);
RcppExport SEXP _hydrorecipes_solve_cplx_irr(SEXP xSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_cplx_irr(x, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// ordinary_coherence_phase
Eigen::MatrixXd ordinary_coherence_phase(const Eigen::ArrayXXcd& x);
RcppExport SEXP _hydrorecipes_ordinary_coherence_phase(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXXcd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ordinary_coherence_phase(x));
    return rcpp_result_gen;
END_RCPP
}
// frequency_to_time_domain
Eigen::MatrixXd frequency_to_time_domain(Eigen::MatrixXcd& pgram, size_t n_groups);
RcppExport SEXP _hydrorecipes_frequency_to_time_domain(SEXP pgramSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type pgram(pgramSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(frequency_to_time_domain(pgram, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// interpolate_tf
Eigen::MatrixXcd interpolate_tf(Eigen::MatrixXcd& x, const Eigen::ArrayXd& frequency_irregular, const Eigen::ArrayXd& frequency_regular, Eigen::VectorXd& knots);
RcppExport SEXP _hydrorecipes_interpolate_tf(SEXP xSEXP, SEXP frequency_irregularSEXP, SEXP frequency_regularSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type frequency_irregular(frequency_irregularSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type frequency_regular(frequency_regularSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolate_tf(x, frequency_irregular, frequency_regular, knots));
    return rcpp_result_gen;
END_RCPP
}
// transfer_pgram_smooth
Eigen::MatrixXcd transfer_pgram_smooth(Eigen::MatrixXd& x, const Eigen::VectorXi& spans, bool detrend, bool demean, double taper, double power, size_t n_groups);
RcppExport SEXP _hydrorecipes_transfer_pgram_smooth(SEXP xSEXP, SEXP spansSEXP, SEXP detrendSEXP, SEXP demeanSEXP, SEXP taperSEXP, SEXP powerSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type spans(spansSEXP);
    Rcpp::traits::input_parameter< bool >::type detrend(detrendSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    Rcpp::traits::input_parameter< double >::type taper(taperSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(transfer_pgram_smooth(x, spans, detrend, demean, taper, power, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// transfer_pgram
Eigen::MatrixXcd transfer_pgram(Eigen::MatrixXd& x, const Eigen::VectorXi& spans, bool detrend, bool demean, double taper);
RcppExport SEXP _hydrorecipes_transfer_pgram(SEXP xSEXP, SEXP spansSEXP, SEXP detrendSEXP, SEXP demeanSEXP, SEXP taperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type spans(spansSEXP);
    Rcpp::traits::input_parameter< bool >::type detrend(detrendSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    Rcpp::traits::input_parameter< double >::type taper(taperSEXP);
    rcpp_result_gen = Rcpp::wrap(transfer_pgram(x, spans, detrend, demean, taper));
    return rcpp_result_gen;
END_RCPP
}
// transfer_welch
Eigen::MatrixXcd transfer_welch(Eigen::MatrixXd& x, size_t length_subset, double overlap, Eigen::VectorXd window);
RcppExport SEXP _hydrorecipes_transfer_welch(SEXP xSEXP, SEXP length_subsetSEXP, SEXP overlapSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type length_subset(length_subsetSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(transfer_welch(x, length_subset, overlap, window));
    return rcpp_result_gen;
END_RCPP
}
// predict_pgram_frf
Eigen::MatrixXd predict_pgram_frf(Eigen::MatrixXd& x, Eigen::MatrixXd& x_out, Eigen::VectorXi spans, size_t n_groups);
RcppExport SEXP _hydrorecipes_predict_pgram_frf(SEXP xSEXP, SEXP x_outSEXP, SEXP spansSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x_out(x_outSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type spans(spansSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_pgram_frf(x, x_out, spans, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// index_from_i_j
size_t index_from_i_j(size_t i, size_t j, size_t n_col);
RcppExport SEXP _hydrorecipes_index_from_i_j(SEXP iSEXP, SEXP jSEXP, SEXP n_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_col(n_colSEXP);
    rcpp_result_gen = Rcpp::wrap(index_from_i_j(i, j, n_col));
    return rcpp_result_gen;
END_RCPP
}
// get_column_number
size_t get_column_number(size_t n);
RcppExport SEXP _hydrorecipes_get_column_number(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_column_number(n));
    return rcpp_result_gen;
END_RCPP
}
// index_from_j_i
size_t index_from_j_i(size_t i, size_t j, size_t n_col);
RcppExport SEXP _hydrorecipes_index_from_j_i(SEXP iSEXP, SEXP jSEXP, SEXP n_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_col(n_colSEXP);
    rcpp_result_gen = Rcpp::wrap(index_from_j_i(i, j, n_col));
    return rcpp_result_gen;
END_RCPP
}
// next_n_eigen
size_t next_n_eigen(size_t n);
RcppExport SEXP _hydrorecipes_next_n_eigen(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(next_n_eigen(n));
    return rcpp_result_gen;
END_RCPP
}
// pad_vector
Eigen::VectorXd pad_vector(Eigen::VectorXd x, size_t n_old, size_t n_new);
RcppExport SEXP _hydrorecipes_pad_vector(SEXP xSEXP, SEXP n_oldSEXP, SEXP n_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_old(n_oldSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_new(n_newSEXP);
    rcpp_result_gen = Rcpp::wrap(pad_vector(x, n_old, n_new));
    return rcpp_result_gen;
END_RCPP
}
// detrend_matrix
Eigen::MatrixXd detrend_matrix(const Eigen::MatrixXd& x);
RcppExport SEXP _hydrorecipes_detrend_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(detrend_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// demean_matrix
Eigen::MatrixXd demean_matrix(const Eigen::MatrixXd& x);
RcppExport SEXP _hydrorecipes_demean_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(demean_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// detrend_and_demean_matrix
Eigen::MatrixXd detrend_and_demean_matrix(const Eigen::MatrixXd& x, bool detrend, bool demean);
RcppExport SEXP _hydrorecipes_detrend_and_demean_matrix(SEXP xSEXP, SEXP detrendSEXP, SEXP demeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type detrend(detrendSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    rcpp_result_gen = Rcpp::wrap(detrend_and_demean_matrix(x, detrend, demean));
    return rcpp_result_gen;
END_RCPP
}
// modified_daniell
Eigen::VectorXd modified_daniell(Eigen::VectorXi spans);
RcppExport SEXP _hydrorecipes_modified_daniell(SEXP spansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type spans(spansSEXP);
    rcpp_result_gen = Rcpp::wrap(modified_daniell(spans));
    return rcpp_result_gen;
END_RCPP
}
// kernel_apply
Eigen::MatrixXcd kernel_apply(Eigen::MatrixXcd& x, Eigen::VectorXd& y);
RcppExport SEXP _hydrorecipes_kernel_apply(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_apply(x, y));
    return rcpp_result_gen;
END_RCPP
}
// spec_taper
Eigen::VectorXd spec_taper(size_t n_row, double p);
RcppExport SEXP _hydrorecipes_spec_taper(SEXP n_rowSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n_row(n_rowSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(spec_taper(n_row, p));
    return rcpp_result_gen;
END_RCPP
}
// make_groups
Eigen::VectorXi make_groups(size_t n_groups, size_t n);
RcppExport SEXP _hydrorecipes_make_groups(SEXP n_groupsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(make_groups(n_groups, n));
    return rcpp_result_gen;
END_RCPP
}
// power_spaced
Eigen::ArrayXd power_spaced(size_t n, double min, double max, double power);
RcppExport SEXP _hydrorecipes_power_spaced(SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(power_spaced(n, min, max, power));
    return rcpp_result_gen;
END_RCPP
}
// group_frequency
Eigen::VectorXd group_frequency(Eigen::ArrayXd frequencies, size_t n_groups);
RcppExport SEXP _hydrorecipes_group_frequency(SEXP frequenciesSEXP, SEXP n_groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type frequencies(frequenciesSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_groups(n_groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(group_frequency(frequencies, n_groups));
    return rcpp_result_gen;
END_RCPP
}
// determine_frequency
Eigen::VectorXd determine_frequency(size_t n);
RcppExport SEXP _hydrorecipes_determine_frequency(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_frequency(n));
    return rcpp_result_gen;
END_RCPP
}
// check_ffts
Eigen::MatrixXcd check_ffts(Eigen::MatrixXcd& x, double cutoff);
RcppExport SEXP _hydrorecipes_check_ffts(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXcd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(check_ffts(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// which_indices
Eigen::VectorXi which_indices(const Eigen::VectorXd& x, const Eigen::VectorXd& knots);
RcppExport SEXP _hydrorecipes_which_indices(SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(which_indices(x, knots));
    return rcpp_result_gen;
END_RCPP
}
// window_hann
Eigen::VectorXd window_hann(size_t n);
RcppExport SEXP _hydrorecipes_window_hann(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_hann(n));
    return rcpp_result_gen;
END_RCPP
}
// window_tukey
Eigen::VectorXd window_tukey(size_t n, double r);
RcppExport SEXP _hydrorecipes_window_tukey(SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(window_tukey(n, r));
    return rcpp_result_gen;
END_RCPP
}
// window_hann_cplx
Eigen::VectorXcd window_hann_cplx(size_t n);
RcppExport SEXP _hydrorecipes_window_hann_cplx(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_hann_cplx(n));
    return rcpp_result_gen;
END_RCPP
}
// window_rectangle
Eigen::VectorXd window_rectangle(size_t n);
RcppExport SEXP _hydrorecipes_window_rectangle(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_rectangle(n));
    return rcpp_result_gen;
END_RCPP
}
// window_first_deriv
Eigen::ArrayXd window_first_deriv(size_t n, double a0, double a1, double a2, double a3);
RcppExport SEXP _hydrorecipes_window_first_deriv(SEXP nSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    rcpp_result_gen = Rcpp::wrap(window_first_deriv(n, a0, a1, a2, a3));
    return rcpp_result_gen;
END_RCPP
}
// window_nuttall
Eigen::ArrayXd window_nuttall(size_t n);
RcppExport SEXP _hydrorecipes_window_nuttall(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_nuttall(n));
    return rcpp_result_gen;
END_RCPP
}
// window_blackman_nuttall
Eigen::ArrayXd window_blackman_nuttall(size_t n);
RcppExport SEXP _hydrorecipes_window_blackman_nuttall(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_blackman_nuttall(n));
    return rcpp_result_gen;
END_RCPP
}
// window_blackman_harris
Eigen::ArrayXd window_blackman_harris(size_t n);
RcppExport SEXP _hydrorecipes_window_blackman_harris(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(window_blackman_harris(n));
    return rcpp_result_gen;
END_RCPP
}
// window_scale
double window_scale(Eigen::VectorXd window, size_t n_new, size_t n_fft);
RcppExport SEXP _hydrorecipes_window_scale(SEXP windowSEXP, SEXP n_newSEXP, SEXP n_fftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type window(windowSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_new(n_newSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_fft(n_fftSEXP);
    rcpp_result_gen = Rcpp::wrap(window_scale(window, n_new, n_fft));
    return rcpp_result_gen;
END_RCPP
}
// harmonic_double
Eigen::MatrixXd harmonic_double(const Eigen::VectorXd& x, const Eigen::RowVectorXd& frequency, double cycle_size);
RcppExport SEXP _hydrorecipes_harmonic_double(SEXP xSEXP, SEXP frequencySEXP, SEXP cycle_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::RowVectorXd& >::type frequency(frequencySEXP);
    Rcpp::traits::input_parameter< double >::type cycle_size(cycle_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(harmonic_double(x, frequency, cycle_size));
    return rcpp_result_gen;
END_RCPP
}
// impulse_function
std::vector<double> impulse_function(std::vector<double> u, int flow_time_interval);
RcppExport SEXP _hydrorecipes_impulse_function(SEXP uSEXP, SEXP flow_time_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type flow_time_interval(flow_time_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(impulse_function(u, flow_time_interval));
    return rcpp_result_gen;
END_RCPP
}
// log_lags_eigen
Eigen::ArrayXd log_lags_eigen(size_t n, size_t max_lag);
RcppExport SEXP _hydrorecipes_log_lags_eigen(SEXP nSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(log_lags_eigen(n, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// check_lag
int check_lag(int n, int lag, int n_shift);
RcppExport SEXP _hydrorecipes_check_lag(SEXP nSEXP, SEXP lagSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(check_lag(n, lag, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// get_length
int get_length(int n, int n_subset);
RcppExport SEXP _hydrorecipes_get_length(SEXP nSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_length(n, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// get_start
int get_start(int n_out, int lag, int n_subset);
RcppExport SEXP _hydrorecipes_get_start(SEXP n_outSEXP, SEXP lagSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_start(n_out, lag, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// get_end
int get_end(int n, int n_out, int lag, int n_subset);
RcppExport SEXP _hydrorecipes_get_end(SEXP nSEXP, SEXP n_outSEXP, SEXP lagSEXP, SEXP n_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_out(n_outSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_end(n, n_out, lag, n_subset));
    return rcpp_result_gen;
END_RCPP
}
// shift_subset
NumericVector shift_subset(const NumericVector& x, int lag, int n_subset, int n_shift);
RcppExport SEXP _hydrorecipes_shift_subset(SEXP xSEXP, SEXP lagSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_subset(x, lag, n_subset, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// lag_matrix
Rcpp::NumericMatrix lag_matrix(const Rcpp::NumericMatrix& x, const Rcpp::IntegerVector& lags, const Rcpp::CharacterVector suffix, std::string prefix, int n_subset, int n_shift);
RcppExport SEXP _hydrorecipes_lag_matrix(SEXP xSEXP, SEXP lagsSEXP, SEXP suffixSEXP, SEXP prefixSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type suffix(suffixSEXP);
    Rcpp::traits::input_parameter< std::string >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(lag_matrix(x, lags, suffix, prefix, n_subset, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// distributed_lag_parallel
Eigen::MatrixXd distributed_lag_parallel(const Eigen::VectorXd& x, const Eigen::MatrixXd& bl, int lag_max, int n_subset, int n_shift);
RcppExport SEXP _hydrorecipes_distributed_lag_parallel(SEXP xSEXP, SEXP blSEXP, SEXP lag_maxSEXP, SEXP n_subsetSEXP, SEXP n_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type bl(blSEXP);
    Rcpp::traits::input_parameter< int >::type lag_max(lag_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n_subset(n_subsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_shift(n_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(distributed_lag_parallel(x, bl, lag_max, n_subset, n_shift));
    return rcpp_result_gen;
END_RCPP
}
// to_dummy
IntegerMatrix to_dummy(IntegerVector x, size_t n_fact);
RcppExport SEXP _hydrorecipes_to_dummy(SEXP xSEXP, SEXP n_factSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_fact(n_factSEXP);
    rcpp_result_gen = Rcpp::wrap(to_dummy(x, n_fact));
    return rcpp_result_gen;
END_RCPP
}
// well_function_coefficient
double well_function_coefficient(const double flow_rate, const double transmissivity);
RcppExport SEXP _hydrorecipes_well_function_coefficient(SEXP flow_rateSEXP, SEXP transmissivitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type flow_rate(flow_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type transmissivity(transmissivitySEXP);
    rcpp_result_gen = Rcpp::wrap(well_function_coefficient(flow_rate, transmissivity));
    return rcpp_result_gen;
END_RCPP
}
// grf_coefficient
double grf_coefficient(const double flow_rate, const double radius, const double K, const double thickness, const double flow_dimension);
RcppExport SEXP _hydrorecipes_grf_coefficient(SEXP flow_rateSEXP, SEXP radiusSEXP, SEXP KSEXP, SEXP thicknessSEXP, SEXP flow_dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type flow_rate(flow_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double >::type thickness(thicknessSEXP);
    Rcpp::traits::input_parameter< const double >::type flow_dimension(flow_dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(grf_coefficient(flow_rate, radius, K, thickness, flow_dimension));
    return rcpp_result_gen;
END_RCPP
}
// hantush_epsilon
double hantush_epsilon(const double radius, const double leakage);
RcppExport SEXP _hydrorecipes_hantush_epsilon(SEXP radiusSEXP, SEXP leakageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type leakage(leakageSEXP);
    rcpp_result_gen = Rcpp::wrap(hantush_epsilon(radius, leakage));
    return rcpp_result_gen;
END_RCPP
}
// grf_u
double grf_u(const double radius, const double storativity, const double K, const double time);
RcppExport SEXP _hydrorecipes_grf_u(SEXP radiusSEXP, SEXP storativitySEXP, SEXP KSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type storativity(storativitySEXP);
    Rcpp::traits::input_parameter< const double >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(grf_u(radius, storativity, K, time));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hydrorecipes_b_spline", (DL_FUNC) &_hydrorecipes_b_spline, 3},
    {"_hydrorecipes_fft_matrix", (DL_FUNC) &_hydrorecipes_fft_matrix, 2},
    {"_hydrorecipes_convolve_vec", (DL_FUNC) &_hydrorecipes_convolve_vec, 2},
    {"_hydrorecipes_convolve_filter", (DL_FUNC) &_hydrorecipes_convolve_filter, 4},
    {"_hydrorecipes_convolve_overlap_add", (DL_FUNC) &_hydrorecipes_convolve_overlap_add, 2},
    {"_hydrorecipes_convolve_overlap_save", (DL_FUNC) &_hydrorecipes_convolve_overlap_save, 2},
    {"_hydrorecipes_convolve_tf", (DL_FUNC) &_hydrorecipes_convolve_tf, 2},
    {"_hydrorecipes_convolve_matrix", (DL_FUNC) &_hydrorecipes_convolve_matrix, 4},
    {"_hydrorecipes_multiply_ffts", (DL_FUNC) &_hydrorecipes_multiply_ffts, 1},
    {"_hydrorecipes_fill_lower_left", (DL_FUNC) &_hydrorecipes_fill_lower_left, 2},
    {"_hydrorecipes_spec_pgram", (DL_FUNC) &_hydrorecipes_spec_pgram, 5},
    {"_hydrorecipes_spec_welch", (DL_FUNC) &_hydrorecipes_spec_welch, 4},
    {"_hydrorecipes_solve_cplx_parallel", (DL_FUNC) &_hydrorecipes_solve_cplx_parallel, 1},
    {"_hydrorecipes_solve_cplx_irr", (DL_FUNC) &_hydrorecipes_solve_cplx_irr, 2},
    {"_hydrorecipes_ordinary_coherence_phase", (DL_FUNC) &_hydrorecipes_ordinary_coherence_phase, 1},
    {"_hydrorecipes_frequency_to_time_domain", (DL_FUNC) &_hydrorecipes_frequency_to_time_domain, 2},
    {"_hydrorecipes_interpolate_tf", (DL_FUNC) &_hydrorecipes_interpolate_tf, 4},
    {"_hydrorecipes_transfer_pgram_smooth", (DL_FUNC) &_hydrorecipes_transfer_pgram_smooth, 7},
    {"_hydrorecipes_transfer_pgram", (DL_FUNC) &_hydrorecipes_transfer_pgram, 5},
    {"_hydrorecipes_transfer_welch", (DL_FUNC) &_hydrorecipes_transfer_welch, 4},
    {"_hydrorecipes_predict_pgram_frf", (DL_FUNC) &_hydrorecipes_predict_pgram_frf, 4},
    {"_hydrorecipes_index_from_i_j", (DL_FUNC) &_hydrorecipes_index_from_i_j, 3},
    {"_hydrorecipes_get_column_number", (DL_FUNC) &_hydrorecipes_get_column_number, 1},
    {"_hydrorecipes_index_from_j_i", (DL_FUNC) &_hydrorecipes_index_from_j_i, 3},
    {"_hydrorecipes_next_n_eigen", (DL_FUNC) &_hydrorecipes_next_n_eigen, 1},
    {"_hydrorecipes_pad_vector", (DL_FUNC) &_hydrorecipes_pad_vector, 3},
    {"_hydrorecipes_detrend_matrix", (DL_FUNC) &_hydrorecipes_detrend_matrix, 1},
    {"_hydrorecipes_demean_matrix", (DL_FUNC) &_hydrorecipes_demean_matrix, 1},
    {"_hydrorecipes_detrend_and_demean_matrix", (DL_FUNC) &_hydrorecipes_detrend_and_demean_matrix, 3},
    {"_hydrorecipes_modified_daniell", (DL_FUNC) &_hydrorecipes_modified_daniell, 1},
    {"_hydrorecipes_kernel_apply", (DL_FUNC) &_hydrorecipes_kernel_apply, 2},
    {"_hydrorecipes_spec_taper", (DL_FUNC) &_hydrorecipes_spec_taper, 2},
    {"_hydrorecipes_make_groups", (DL_FUNC) &_hydrorecipes_make_groups, 2},
    {"_hydrorecipes_power_spaced", (DL_FUNC) &_hydrorecipes_power_spaced, 4},
    {"_hydrorecipes_group_frequency", (DL_FUNC) &_hydrorecipes_group_frequency, 2},
    {"_hydrorecipes_determine_frequency", (DL_FUNC) &_hydrorecipes_determine_frequency, 1},
    {"_hydrorecipes_check_ffts", (DL_FUNC) &_hydrorecipes_check_ffts, 2},
    {"_hydrorecipes_which_indices", (DL_FUNC) &_hydrorecipes_which_indices, 2},
    {"_hydrorecipes_window_hann", (DL_FUNC) &_hydrorecipes_window_hann, 1},
    {"_hydrorecipes_window_tukey", (DL_FUNC) &_hydrorecipes_window_tukey, 2},
    {"_hydrorecipes_window_hann_cplx", (DL_FUNC) &_hydrorecipes_window_hann_cplx, 1},
    {"_hydrorecipes_window_rectangle", (DL_FUNC) &_hydrorecipes_window_rectangle, 1},
    {"_hydrorecipes_window_first_deriv", (DL_FUNC) &_hydrorecipes_window_first_deriv, 5},
    {"_hydrorecipes_window_nuttall", (DL_FUNC) &_hydrorecipes_window_nuttall, 1},
    {"_hydrorecipes_window_blackman_nuttall", (DL_FUNC) &_hydrorecipes_window_blackman_nuttall, 1},
    {"_hydrorecipes_window_blackman_harris", (DL_FUNC) &_hydrorecipes_window_blackman_harris, 1},
    {"_hydrorecipes_window_scale", (DL_FUNC) &_hydrorecipes_window_scale, 3},
    {"_hydrorecipes_harmonic_double", (DL_FUNC) &_hydrorecipes_harmonic_double, 3},
    {"_hydrorecipes_impulse_function", (DL_FUNC) &_hydrorecipes_impulse_function, 2},
    {"_hydrorecipes_log_lags_eigen", (DL_FUNC) &_hydrorecipes_log_lags_eigen, 2},
    {"_hydrorecipes_check_lag", (DL_FUNC) &_hydrorecipes_check_lag, 3},
    {"_hydrorecipes_get_length", (DL_FUNC) &_hydrorecipes_get_length, 2},
    {"_hydrorecipes_get_start", (DL_FUNC) &_hydrorecipes_get_start, 3},
    {"_hydrorecipes_get_end", (DL_FUNC) &_hydrorecipes_get_end, 4},
    {"_hydrorecipes_shift_subset", (DL_FUNC) &_hydrorecipes_shift_subset, 4},
    {"_hydrorecipes_lag_matrix", (DL_FUNC) &_hydrorecipes_lag_matrix, 6},
    {"_hydrorecipes_distributed_lag_parallel", (DL_FUNC) &_hydrorecipes_distributed_lag_parallel, 5},
    {"_hydrorecipes_to_dummy", (DL_FUNC) &_hydrorecipes_to_dummy, 2},
    {"_hydrorecipes_well_function_coefficient", (DL_FUNC) &_hydrorecipes_well_function_coefficient, 2},
    {"_hydrorecipes_grf_coefficient", (DL_FUNC) &_hydrorecipes_grf_coefficient, 5},
    {"_hydrorecipes_hantush_epsilon", (DL_FUNC) &_hydrorecipes_hantush_epsilon, 2},
    {"_hydrorecipes_grf_u", (DL_FUNC) &_hydrorecipes_grf_u, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_hydrorecipes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
