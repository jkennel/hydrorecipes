% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_find_interval.R
\name{step_find_interval}
\alias{step_find_interval}
\title{Create a lead predictor}
\usage{
step_find_interval(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  vec = NULL,
  encoding = "one_hot",
  prefix = "find_interval_",
  keep_original_cols = FALSE,
  columns = NULL,
  skip = FALSE,
  id = rand_id("find_interval")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details. The selected
variables \emph{must} be factors.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the new columns created by this step from
the original variables will be used as \emph{predictors} in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{vec}{numeric, sorted (weakly) increasingly, of length \code{N},
    say.}

\item{encoding}{Character string specifying the type of encoding to use. The
options are "dummy", "one_hot", "factor" or "integer" encoding. Defaults to
"one_hot".}

\item{prefix}{A prefix for generated column names, default to
"find_interval_".}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{columns}{A character string of variable names that will
be populated (eventually) by the \code{terms} argument.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of recipe with the new step added to the sequence
of any existing operations.
}
\description{
\code{step_find_interval} creates a \emph{specification} of a recipe step that
will add binary terms (one-hot) that are based on provided boundary values.
This is an efficient combination of \code{recipes::step_cut} and
\code{recipes::step_dummy}.
}
\details{
This function uses \code{base::find_interval()} to find data within a set
of provided intervals. The data can either be returned as an factor column
or with dummy encoding.
}
\examples{
data(wipp30)

r_fi_one_hot <- recipe(wl ~ ., data = wipp30) |>
  step_find_interval(time,
    vec = c(9000, 12000),
    keep_original_cols = TRUE,
    encoding = "one_hot"
  ) |>
  prep() |>
  bake(new_data = NULL)

r_fi_dummy <- recipe(wl ~ ., data = wipp30) |>
  step_find_interval(time,
    vec = c(9000, 12000),
    encoding = "dummy"
  ) |>
  prep() |>
  bake(new_data = NULL)

r_fact <- recipe(wl ~ ., data = wipp30) |>
  step_find_interval(time,
    vec = c(9000, 12000),
    encoding = "factor"
  ) |>
  prep() |>
  bake(new_data = NULL)

}
\seealso{
\code{\link[recipes:step_cut]{recipes::step_cut()}} \link[recipes:step_dummy]{recipes::step_dummy}
}
